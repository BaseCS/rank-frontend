/*
 * BaseCaSE API Draft
 * Preliminary OpenAPI documentation. Subject to change.
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BaseCaSeApiDraft);
  }
}(this, function(expect, BaseCaSeApiDraft) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PublicationAttributes', function() {
      beforeEach(function() {
        instance = new BaseCaSeApiDraft.PublicationAttributes();
      });

      it('should create an instance of PublicationAttributes', function() {
        // TODO: update the code to test PublicationAttributes
        expect(instance).to.be.a(BaseCaSeApiDraft.PublicationAttributes);
      });

      it('should have the property dBLPType (base name: "DBLP_type")', function() {
        // TODO: update the code to test the property dBLPType
        expect(instance).to.have.property('dBLPType');
        // expect(instance.dBLPType).to.be(expectedValueLiteral);
      });

      it('should have the property electronicEdition (base name: "electronic_edition")', function() {
        // TODO: update the code to test the property electronicEdition
        expect(instance).to.have.property('electronicEdition');
        // expect(instance.electronicEdition).to.be(expectedValueLiteral);
      });

      it('should have the property year (base name: "year")', function() {
        // TODO: update the code to test the property year
        expect(instance).to.have.property('year');
        // expect(instance.year).to.be(expectedValueLiteral);
      });

      it('should have the property crossRef (base name: "cross_ref")', function() {
        // TODO: update the code to test the property crossRef
        expect(instance).to.have.property('crossRef');
        // expect(instance.crossRef).to.be(expectedValueLiteral);
      });

      it('should have the property numberOfPages (base name: "number_of_pages")', function() {
        // TODO: update the code to test the property numberOfPages
        expect(instance).to.have.property('numberOfPages');
        // expect(instance.numberOfPages).to.be(expectedValueLiteral);
      });

      it('should have the property pages (base name: "pages")', function() {
        // TODO: update the code to test the property pages
        expect(instance).to.have.property('pages');
        // expect(instance.pages).to.be(expectedValueLiteral);
      });

      it('should have the property source (base name: "source")', function() {
        // TODO: update the code to test the property source
        expect(instance).to.have.property('source');
        // expect(instance.source).to.be(expectedValueLiteral);
      });

      it('should have the property school (base name: "school")', function() {
        // TODO: update the code to test the property school
        expect(instance).to.have.property('school');
        // expect(instance.school).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

      it('should have the property notes (base name: "notes")', function() {
        // TODO: update the code to test the property notes
        expect(instance).to.have.property('notes');
        // expect(instance.notes).to.be(expectedValueLiteral);
      });

    });
  });

}));
