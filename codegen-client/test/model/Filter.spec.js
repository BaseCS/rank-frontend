/*
 * BaseCaSE API Draft
 * Preliminary OpenAPI documentation. Subject to change.
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BaseCaSeApiDraft);
  }
}(this, function(expect, BaseCaSeApiDraft) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Filter', function() {
      beforeEach(function() {
        instance = new BaseCaSeApiDraft.Filter();
      });

      it('should create an instance of Filter', function() {
        // TODO: update the code to test Filter
        expect(instance).to.be.a(BaseCaSeApiDraft.Filter);
      });

      it('should have the property minPages (base name: "min_pages")', function() {
        // TODO: update the code to test the property minPages
        expect(instance).to.have.property('minPages');
        // expect(instance.minPages).to.be(expectedValueLiteral);
      });

      it('should have the property maxPages (base name: "max_pages")', function() {
        // TODO: update the code to test the property maxPages
        expect(instance).to.have.property('maxPages');
        // expect(instance.maxPages).to.be(expectedValueLiteral);
      });

      it('should have the property year (base name: "year")', function() {
        // TODO: update the code to test the property year
        expect(instance).to.have.property('year');
        // expect(instance.year).to.be(expectedValueLiteral);
      });

      it('should have the property minYear (base name: "min_year")', function() {
        // TODO: update the code to test the property minYear
        expect(instance).to.have.property('minYear');
        // expect(instance.minYear).to.be(expectedValueLiteral);
      });

      it('should have the property maxYear (base name: "max_year")', function() {
        // TODO: update the code to test the property maxYear
        expect(instance).to.have.property('maxYear');
        // expect(instance.maxYear).to.be(expectedValueLiteral);
      });

      it('should have the property institution (base name: "institution")', function() {
        // TODO: update the code to test the property institution
        expect(instance).to.have.property('institution');
        // expect(instance.institution).to.be(expectedValueLiteral);
      });

      it('should have the property source (base name: "source")', function() {
        // TODO: update the code to test the property source
        expect(instance).to.have.property('source');
        // expect(instance.source).to.be(expectedValueLiteral);
      });

      it('should have the property publisher (base name: "publisher")', function() {
        // TODO: update the code to test the property publisher
        expect(instance).to.have.property('publisher');
        // expect(instance.publisher).to.be(expectedValueLiteral);
      });

      it('should have the property dblpType (base name: "dblp_type")', function() {
        // TODO: update the code to test the property dblpType
        expect(instance).to.have.property('dblpType');
        // expect(instance.dblpType).to.be(expectedValueLiteral);
      });

    });
  });

}));
