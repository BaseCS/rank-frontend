/*
 * BaseCaSE API Draft
 * Preliminary OpenAPI documentation. Subject to change.
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Error} from '../model/Error';
import {Filter} from '../model/Filter';
import {Id1} from '../model/Id1';
import {InlineResponse2005} from '../model/InlineResponse2005';
import {InlineResponse2006} from '../model/InlineResponse2006';
import {InlineResponse2007} from '../model/InlineResponse2007';
import {InlineResponse2008} from '../model/InlineResponse2008';
import {InlineResponse2009} from '../model/InlineResponse2009';

/**
* Publications service.
* @module api/PublicationsApi
* @version 0.1.0
*/
export class PublicationsApi {

    /**
    * Constructs a new PublicationsApi. 
    * @alias module:api/PublicationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the publicationsCountGet operation.
     * @callback moduleapi/PublicationsApi~publicationsCountGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a count of publications
     * Returns a numeric count of publications with pagination. Also accepts optional filters. All filter options can be omitted.
     * @param {Object} opts Optional parameters
     * @param {Number} opts._number Number of results per page. Range [10, 500] inclusive. Default value is used if omitted. (default to <.>)
     * @param {Number} opts.page Number of pages to skip. Used together with number for pagination. Default value is used if omitted. (default to <.>)
     * @param {module:model/Filter} opts.filter JSON object containing filter options. All properties are optional.
     * @param {module:api/PublicationsApi~publicationsCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    publicationsCountGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'number': opts['_number'],'page': opts['page'],'filter': opts['filter']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/publications/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicationsFilterGet operation.
     * @callback moduleapi/PublicationsApi~publicationsFilterGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a filtered list of publications
     * Returns a paginated list of publications with optional filters. All filter options can be omitted. Empty list returned if no publications match filter options.
     * @param {Object} opts Optional parameters
     * @param {Number} opts._number Number of results per page. Range [10, 500] inclusive. Default value is used if omitted. (default to <.>)
     * @param {Number} opts.page Number of pages to skip. Used together with number for pagination. Default value is used if omitted. (default to <.>)
     * @param {module:model/Filter} opts.filter JSON object containing filter options. All properties are optional.
     * @param {module:api/PublicationsApi~publicationsFilterGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    publicationsFilterGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'number': opts['_number'],'page': opts['page'],'filter': opts['filter']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/publications/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicationsGet operation.
     * @callback moduleapi/PublicationsApi~publicationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of publications
     * Returns a list of publications with pagination.
     * @param {Object} opts Optional parameters
     * @param {Number} opts._number Number of results per page. Range [10, 500] inclusive. Default value is used if omitted. (default to <.>)
     * @param {Number} opts.page Number of pages to skip. Used together with number for pagination. Default value is used if omitted. (default to <.>)
     * @param {module:api/PublicationsApi~publicationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    publicationsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'number': opts['_number'],'page': opts['page']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/publications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicationsIdGet operation.
     * @callback moduleapi/PublicationsApi~publicationsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific publication
     * Returns a single publication that matches the provided identifier.
     * @param {module:model/Id1} id Publication&#x27;s string name or integer ID. Integer ID not guaranteed to remain the same after database rebuild, use string name for consistency.
     * @param {module:api/PublicationsApi~publicationsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    publicationsIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publicationsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/publications/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicationsIdInstitutionsGet operation.
     * @callback moduleapi/PublicationsApi~publicationsIdInstitutionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of institutions affiliated with this publication
     * Returns a list of institutions affiliated with the contributors of this publication. Empty list returned if no affiliations found.
     * @param {module:model/Id1} id Publication&#x27;s string name or integer ID. Integer ID not guaranteed to remain the same after database rebuild, use string name for consistency.
     * @param {module:api/PublicationsApi~publicationsIdInstitutionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    publicationsIdInstitutionsGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publicationsIdInstitutionsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2009;

      return this.apiClient.callApi(
        '/publications/{id}/institutions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the publicationsIdPeopleGet operation.
     * @callback moduleapi/PublicationsApi~publicationsIdPeopleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of people who contributed to this publication
     * Returns a list of people who contributed to this publication. Empty list returned if no contributors found.
     * @param {module:model/Id1} id Publication&#x27;s string name or integer ID. Integer ID not guaranteed to remain the same after database rebuild, use string name for consistency.
     * @param {module:api/PublicationsApi~publicationsIdPeopleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    publicationsIdPeopleGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publicationsIdPeopleGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/publications/{id}/people', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}