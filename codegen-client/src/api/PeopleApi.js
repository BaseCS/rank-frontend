/*
 * BaseCaSE API Draft
 * Preliminary OpenAPI documentation. Subject to change.
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Error} from '../model/Error';
import {Id2} from '../model/Id2';
import {InlineResponse2001} from '../model/InlineResponse2001';
import {InlineResponse20010} from '../model/InlineResponse20010';
import {InlineResponse20011} from '../model/InlineResponse20011';
import {InlineResponse2002} from '../model/InlineResponse2002';
import {InlineResponse2005} from '../model/InlineResponse2005';

/**
* People service.
* @module api/PeopleApi
* @version 0.1.0
*/
export class PeopleApi {

    /**
    * Constructs a new PeopleApi. 
    * @alias module:api/PeopleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the peopleGet operation.
     * @callback moduleapi/PeopleApi~peopleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of people
     * Returns a list of people with pagination.
     * @param {Object} opts Optional parameters
     * @param {Number} opts._number Number of results per page. Range [10, 500] inclusive. Default value is used if omitted. (default to <.>)
     * @param {Number} opts.page Number of pages to skip. Used together with number for pagination. Default value is used if omitted. (default to <.>)
     * @param {module:api/PeopleApi~peopleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    peopleGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'number': opts['_number'],'page': opts['page']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/people', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the peopleIdAffiliationGet operation.
     * @callback moduleapi/PeopleApi~peopleIdAffiliationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a person&#x27;s institutional affiliation
     * Returns the current institution this person is affiliated with. Empty object returned if no affiliation found.
     * @param {module:model/Id2} id Person&#x27;s string name or integer ID. Integer ID not guaranteed to remain the same after database rebuild, use string name for consistency.
     * @param {module:api/PeopleApi~peopleIdAffiliationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    peopleIdAffiliationGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling peopleIdAffiliationGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/people/{id}/affiliation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the peopleIdCollaboratorsGet operation.
     * @callback moduleapi/PeopleApi~peopleIdCollaboratorsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of this person&#x27;s collaborators
     * Returns a list of people who&#x27;ve contributed to the same publications this person has. Empty list returned if no collaborators found.
     * @param {module:model/Id2} id Person&#x27;s string name or integer ID. Integer ID not guaranteed to remain the same after database rebuild, use string name for consistency.
     * @param {module:api/PeopleApi~peopleIdCollaboratorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    peopleIdCollaboratorsGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling peopleIdCollaboratorsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/people/{id}/collaborators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the peopleIdCoworkersGet operation.
     * @callback moduleapi/PeopleApi~peopleIdCoworkersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of this person&#x27;s coworkers
     * Returns a list of people who&#x27;ve contributed to the same publications this person has. Empty list returned if no collaborators found.
     * @param {module:model/Id2} id Person&#x27;s string name or integer ID. Integer ID not guaranteed to remain the same after database rebuild, use string name for consistency.
     * @param {module:api/PeopleApi~peopleIdCoworkersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    peopleIdCoworkersGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling peopleIdCoworkersGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/people/{id}/coworkers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the peopleIdGet operation.
     * @callback moduleapi/PeopleApi~peopleIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific person
     * Returns a single person who matches the provided identifier.
     * @param {module:model/Id2} id Person&#x27;s string name or integer ID. Integer ID not guaranteed to remain the same after database rebuild, use string name for consistency.
     * @param {module:api/PeopleApi~peopleIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    peopleIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling peopleIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/people/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the peopleIdPublicationsGet operation.
     * @callback moduleapi/PeopleApi~peopleIdPublicationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of publications from this person
     * Returns a list of publications this person has contributed to. Empty list returned if no publications found.
     * @param {module:model/Id2} id Person&#x27;s string name or integer ID. Integer ID not guaranteed to remain the same after database rebuild, use string name for consistency.
     * @param {module:api/PeopleApi~peopleIdPublicationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    peopleIdPublicationsGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling peopleIdPublicationsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/people/{id}/publications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}