/*
 * BaseCaSE API Draft
 * Preliminary OpenAPI documentation. Subject to change.
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Error} from '../model/Error';
import {Id3} from '../model/Id3';
import {InlineResponse20012} from '../model/InlineResponse20012';
import {InlineResponse20013} from '../model/InlineResponse20013';
import {InlineResponse2002} from '../model/InlineResponse2002';
import {InlineResponse2005} from '../model/InlineResponse2005';
import {InlineResponse2009} from '../model/InlineResponse2009';

/**
* PublicationSourcesAndCollections service.
* @module api/PublicationSourcesAndCollectionsApi
* @version 0.1.0
*/
export class PublicationSourcesAndCollectionsApi {

    /**
    * Constructs a new PublicationSourcesAndCollectionsApi. 
    * @alias module:api/PublicationSourcesAndCollectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the sourcesGet operation.
     * @callback moduleapi/PublicationSourcesAndCollectionsApi~sourcesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of sources/collections
     * Returns a list of sources/collections with pagination.
     * @param {Object} opts Optional parameters
     * @param {Number} opts._number Number of results per page. Range [10, 500] inclusive. Default value is used if omitted. (default to <.>)
     * @param {Number} opts.page Number of pages to skip. Used together with number for pagination. Default value is used if omitted. (default to <.>)
     * @param {module:api/PublicationSourcesAndCollectionsApi~sourcesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    sourcesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'number': opts['_number'],'page': opts['page']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sourcesIdGet operation.
     * @callback moduleapi/PublicationSourcesAndCollectionsApi~sourcesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific source/collection
     * Returns a single source/collection that matches the provided identifier.
     * @param {module:model/Id3} id Source/collection&#x27;s string name or integer ID. Integer ID not guaranteed to remain the same after database rebuild, use string name for consistency.
     * @param {module:api/PublicationSourcesAndCollectionsApi~sourcesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    sourcesIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sourcesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/sources/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sourcesIdInstitutionsGet operation.
     * @callback moduleapi/PublicationSourcesAndCollectionsApi~sourcesIdInstitutionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of institutions in this source/collection
     * Returns a list of institutions that have published in this source/collection. Empty list returned if no institutions found.
     * @param {module:model/Id3} id Source/collection&#x27;s string name or integer ID. Integer ID not guaranteed to remain the same after database rebuild, use string name for consistency.
     * @param {module:api/PublicationSourcesAndCollectionsApi~sourcesIdInstitutionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    sourcesIdInstitutionsGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sourcesIdInstitutionsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2009;

      return this.apiClient.callApi(
        '/sources/{id}/institutions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sourcesIdPeopleGet operation.
     * @callback moduleapi/PublicationSourcesAndCollectionsApi~sourcesIdPeopleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of people in this source/collection
     * Returns a list of people who have published in this source/collection. Empty list returned if no contributors found.
     * @param {module:model/Id3} id Source/collection&#x27;s string name or integer ID. Integer ID not guaranteed to remain the same after database rebuild, use string name for consistency.
     * @param {module:api/PublicationSourcesAndCollectionsApi~sourcesIdPeopleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    sourcesIdPeopleGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sourcesIdPeopleGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/sources/{id}/people', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sourcesIdPublicationsGet operation.
     * @callback moduleapi/PublicationSourcesAndCollectionsApi~sourcesIdPublicationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of publications in this source/collection
     * Returns a list of publications that have been included in this source/collection. Empty list returned if no publications found.
     * @param {module:model/Id3} id Source/collection&#x27;s string name or integer ID. Integer ID not guaranteed to remain the same after database rebuild, use string name for consistency.
     * @param {module:api/PublicationSourcesAndCollectionsApi~sourcesIdPublicationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    sourcesIdPublicationsGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sourcesIdPublicationsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/sources/{id}/publications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}