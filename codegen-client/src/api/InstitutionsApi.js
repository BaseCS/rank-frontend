/*
 * BaseCaSE API Draft
 * Preliminary OpenAPI documentation. Subject to change.
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Error} from '../model/Error';
import {Filter} from '../model/Filter';
import {Id} from '../model/Id';
import {InlineResponse200} from '../model/InlineResponse200';
import {InlineResponse2001} from '../model/InlineResponse2001';
import {InlineResponse2002} from '../model/InlineResponse2002';
import {InlineResponse2003} from '../model/InlineResponse2003';
import {InlineResponse2004} from '../model/InlineResponse2004';
import {InlineResponse2005} from '../model/InlineResponse2005';

/**
* Institutions service.
* @module api/InstitutionsApi
* @version 0.1.0
*/
export class InstitutionsApi {

    /**
    * Constructs a new InstitutionsApi. 
    * @alias module:api/InstitutionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the institutionsGet operation.
     * @callback moduleapi/InstitutionsApi~institutionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of institutions
     * Returns a list of institutions with pagination.
     * @param {Object} opts Optional parameters
     * @param {Number} opts._number Number of results per page. Range [10, 500] inclusive. Default value is used if omitted. (default to <.>)
     * @param {Number} opts.page Number of pages to skip. Used together with number for pagination. Default value is used if omitted. (default to <.>)
     * @param {module:api/InstitutionsApi~institutionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    institutionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'number': opts['_number'],'page': opts['page']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/institutions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the institutionsIdGet operation.
     * @callback moduleapi/InstitutionsApi~institutionsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific institution
     * Returns a single institution that matches the provided identifier.
     * @param {module:model/Id} id Organization&#x27;s string name or integer ID. Integer ID not guaranteed to remain the same after database rebuild, use string name for consistency.
     * @param {module:api/InstitutionsApi~institutionsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    institutionsIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling institutionsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/institutions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the institutionsIdPeopleGet operation.
     * @callback moduleapi/InstitutionsApi~institutionsIdPeopleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of people affiliated with this institution
     * Returns a list of people whose affiliations match this institution&#x27;s identifier. Empty list returned if no affiliations found.
     * @param {module:model/Id} id Organization&#x27;s string name or integer ID. Integer ID not guaranteed to remain the same after database rebuild, use string name for consistency.
     * @param {module:api/InstitutionsApi~institutionsIdPeopleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    institutionsIdPeopleGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling institutionsIdPeopleGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/institutions/{id}/people', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the institutionsIdPublicationsCountGet operation.
     * @callback moduleapi/InstitutionsApi~institutionsIdPublicationsCountGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a count of publications from this institution
     * Returns a numeric count of publications from this institution. Also accepts optional filters. All filter properties can be omitted.
     * @param {module:model/Id} id Organization&#x27;s string name or integer ID. Integer ID not guaranteed to remain the same after database rebuild, use string name for consistency.
     * @param {Object} opts Optional parameters
     * @param {module:model/Filter} opts.filter JSON object containing filter options. All properties are optional.
     * @param {module:api/InstitutionsApi~institutionsIdPublicationsCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    institutionsIdPublicationsCountGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling institutionsIdPublicationsCountGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/institutions/{id}/publications/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the institutionsIdPublicationsFilterGet operation.
     * @callback moduleapi/InstitutionsApi~institutionsIdPublicationsFilterGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a filtered list of publications from this institution
     * Returns a list of publications that originated from this institution with optional filters. All filter properties can be omitted. Empty list returned if no publications found.
     * @param {module:model/Id} id Organization&#x27;s string name or integer ID. Integer ID not guaranteed to remain the same after database rebuild, use string name for consistency.
     * @param {Object} opts Optional parameters
     * @param {module:model/Filter} opts.filter JSON object containing filter options. All properties are optional.
     * @param {module:api/InstitutionsApi~institutionsIdPublicationsFilterGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    institutionsIdPublicationsFilterGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling institutionsIdPublicationsFilterGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/institutions/{id}/publications/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the institutionsIdPublicationsGet operation.
     * @callback moduleapi/InstitutionsApi~institutionsIdPublicationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of publications from this institution
     * Returns a list of publications that originated from this institution. Empty list returned if no publications found.
     * @param {module:model/Id} id Organization&#x27;s string name or integer ID. Integer ID not guaranteed to remain the same after database rebuild, use string name for consistency.
     * @param {module:api/InstitutionsApi~institutionsIdPublicationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    institutionsIdPublicationsGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling institutionsIdPublicationsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/institutions/{id}/publications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the institutionsIdSourcesGet operation.
     * @callback moduleapi/InstitutionsApi~institutionsIdSourcesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of sources/collections this institution has published in
     * Returns a list of sources/collections that contain publications originating from this institution. Empty list returned if no sources and/or collections found.
     * @param {module:model/Id} id Organization&#x27;s string name or integer ID. Integer ID not guaranteed to remain the same after database rebuild, use string name for consistency.
     * @param {module:api/InstitutionsApi~institutionsIdSourcesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    institutionsIdSourcesGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling institutionsIdSourcesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/institutions/{id}/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}